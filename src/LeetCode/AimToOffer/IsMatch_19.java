package LeetCode.AimToOffer;

/**
 * @Auther: Lil_boat
 * @Date: 14:16 2021/12/28
 * @Description: 请实现一个函数用来匹配包含'. '和'*'的正则表达式。
 * 模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。
 * 在本题中，匹配是指字符串的所有字符匹配整个模式。
 * 例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。
 */
public class IsMatch_19 {
    /*
     * 设 s 的长度为 n ， p 的长度为 m ；
     * 将 s 的第 i 个字符记为 si，p 的第 j 个字符记为 pj，
     * 将 s 的前 i 个字符组成的子字符串记为 s[:i] ,
     * 同理将 p 的前 j 个字符组成的子字符串记为 p[:j] 。

     * 因此，本题可转化为求 s[:n] 是否能和 p[:m] 匹配。
     * 总体思路是从 s[:1] 和 p[:1] 是否能匹配开始判断，每轮添加一个字符并判断是否能匹配，直至添加完整个字符串 s 和 p 。
     * 展开来看，假设 s[:i] 与 p[:j] 可以匹配，那么下一状态有两种：
            添加一个字符 s_{i+1}后是否能匹配？
            添加字符 p_{j+1}后是否能匹配？
     *
     * 因此，本题的状态共有 m×n 种，应定义状态矩阵 dp ，dp[i][j] 代表 s[:i] 与 p[:j] 是否可以匹配。
     *
     * 做好状态定义，接下来就是根据 「普通字符」 , 「.」 , 「*」三种字符的功能定义，分析出动态规划的转移方程。
     *
     * 动态规划解析：
     * 一、状态定义： 设动态规划矩阵 dp ， dp[i][j] 代表字符串 s 的前 i 个字符和 p 的前 j 个字符能否匹配。
     * 二、转移方程： 需要注意，由于 dp[0][0] 代表的是空字符的状态， 因此 dp[i][j] 对应的添加字符是 s[i - 1] 和 p[j - 1] 。
     *      1.当 p[j - 1] = '*' 时， dp[i][j] 在当以下任一情况为 true 时等于 true ：
     *          dp[i][j - 2]： 即将字符组合 p[j - 2] * 看作出现 0 次时，能否匹配；
     *          dp[i - 1][j] 且 s[i - 1] = p[j - 2]: 即让字符 p[j - 2] 多出现 1 次时，能否匹配；
     *          dp[i - 1][j] 且 p[j - 2] = '.': 即让字符 '.' 多出现 1 次时，能否匹配；
     *
     *      2.当 p[j - 1] != '*' 时， dp[i][j] 在当以下任一情况为 true 时等于 true ：
     *          dp[i - 1][j - 1] 且 s[i - 1] = p[j - 1]： 即让字符 p[j - 1] 多出现一次时，能否匹配；
     *          dp[i - 1][j - 1] 且 p[j - 1] = '.'： 即将字符 . 看作字符 s[i - 1] 时，能否匹配；
     *
     * 三、初始化： 需要先初始化 dp 矩阵首行，以避免状态转移时索引越界。
     *      dp[0][0] = true： 代表两个空字符串能够匹配。
     *      dp[0][j] = dp[0][j - 2] 且 p[j - 1] = '*'： 首行 s 为空字符串，
     *      因此当 p 的偶数位为 * 时才能够匹配（即让 p 的奇数位出现 0 次，保持 p 是空字符串）。
     *      因此，循环遍历字符串 p ，步长为 2（即只看偶数位）。
     * 四、返回值： dp 矩阵右下角字符，代表字符串 s 和 p 能否匹配。
     *
     */
    public static boolean isMatch(String s, String p) {
        // 如果有一个为空，则返回false
        int m = s.length() + 1;
        int n = p.length() + 1;
        boolean[][] dp = new boolean[m][n];
        dp[0][0] = true;
        // 初始化首行
        for (int j = 2; j < n; j += 2) {
            dp[0][j] = dp[0][j - 2] && p.charAt(j - 1) == '*';
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = p.charAt(j - 1) == '*' ? dp[i][j - 2] || dp[i - 1][j] && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == '.') :
                        dp[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.');
            }
        }
        return dp[m - 1][n - 1];
    }

    public static void main(String[] args) {
        String s = "aaa";
        String p = "..*";
        System.out.println(isMatch(s, p));
    }
}
