package LeetCode.Practise_Everyday.Date_2022_05;

/**
 * @Auther: Lil_boat
 * @Date: 17:26 2022/5/4
 * @Tile: 找出游戏的获胜者
 * @Description: 共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n 编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1) 名小伙伴的位置，其中 1 <= i < n ，从第 n 名小伙伴顺时针移动一位会回到第 1 名小伙伴的位置。
 * <p>
 * 游戏遵循如下规则：
 * <p>
 * 从第 1 名小伙伴所在位置 开始 。
 * 沿着顺时针方向数 k 名小伙伴，计数时需要 包含 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。
 * 你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。
 * 如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 顺时针下一位 小伙伴 开始，回到步骤 2 继续执行。
 * 否则，圈子中最后一名小伙伴赢得游戏。
 * 给你参与游戏的小伙伴总数 n ，和一个整数 k ，返回游戏的获胜者。
 *
 * 链接：https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game
 */
public class D04_FindTheWinner_1823 {

    /*
        公式法
            约瑟夫环是一个经典的数学问题，我们不难发现这样的依次报数，似乎有规律可循。为了方便导出递推式，我们重新定义一下题目。
            问题： N个人编号为1，2，……，N，依次报数，每报到M时，杀掉那个人，求最后胜利者的编号。

            这边我们先把结论抛出了。之后带领大家一步一步的理解这个公式是什么来的。
            递推公式：
                    f ( N , M ) = ( f ( N − 1 , M ) + M ) % N

                    f ( N , M ) 表示，N个人报数，每报到M时杀掉那个人，最终胜利者的编号
                    f ( N − 1 , M ) 表示，N-1个人报数，每报到M时杀掉那个人，最终胜利者的编号
            下面我们不用字母表示每一个人，而用数字。
                1 、 2 、 3 、 4 、 5 、 6 、 7 、 8 、 9 、 10 、 11 1、 2 、 3、 4、5 、6、 7 、 8、 9、 10、 11
                表示11个人，他们先排成一排，假设每报到3的人被杀掉。

                刚开始时，头一个人编号是1，从他开始报数，第一轮被杀掉的是编号3的人。
                编号4的人从1开始重新报数，这时候我们可以认为编号4这个人是队伍的头。第二轮被杀掉的是编号6的人。
                编号7的人开始重新报数，这时候我们可以认为编号7这个人是队伍的头。第三轮被杀掉的是编号9的人。
                ……
                第九轮时，编号2的人开始重新报数，这时候我们可以认为编号2这个人是队伍的头。这轮被杀掉的是编号8的人。
                下一个人还是编号为2的人，他从1开始报数，不幸的是他在这轮被杀掉了。
                最后的胜利者是编号为7的人。

                f ( 1 , 3 )：只有1个人了，那个人就是获胜者，他的下标位置是0
                f ( 2 , 3 ) = ( f ( 1 , 3 ) + 3 ) % 2 = 3 % 2 = 1 ：在有2个人的时候，胜利者的下标位置为1
                f ( 3 , 3 ) = ( f ( 2 , 3 ) + 3 ) % 3 = 4 % 3 = 1 ：在有3个人的时候，胜利者的下标位置为1
                f ( 4 , 3 ) = ( f ( 3 , 3 ) + 3 ) % 4 = 4 % 4 = 0 ：在有4个人的时候，胜利者的下标位置为0
                ……
                f ( 11 , 3 ) = (f(10, 3) + 3) % 10 = 6: 在有11个人的时候，胜利者的下标位置是6
     */
    public int findTheWinner(int n, int k) {
        // 定位最后胜利者的下标肯定是0
        int idx = 0;
        for (int i = 2; i <= n; i++){
            // 递推公式
            idx = (idx + k) % i;
        }
        return idx + 1;
    }

    public static void main(String[] args) {
        D04_FindTheWinner_1823 f = new D04_FindTheWinner_1823();
        System.out.println(f.findTheWinner(5, 2));
    }


}
